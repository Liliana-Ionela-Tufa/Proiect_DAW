// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Proiect_Asp.Data;

namespace Proiect_Asp.Migrations
{
    [DbContext(typeof(ProiectContext))]
    [Migration("20220828084307_MMs")]
    partial class MMs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Proiect_Asp.Entities.Adresa", b =>
                {
                    b.Property<int>("IdAdresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NrStrada")
                        .HasColumnType("int");

                    b.Property<string>("Oras")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacientId")
                        .HasColumnType("int");

                    b.Property<string>("Strada")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tara")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAdresa");

                    b.HasIndex("PacientId")
                        .IsUnique();

                    b.ToTable("Adresa");
                });

            modelBuilder.Entity("Proiect_Asp.Entities.Doctor", b =>
                {
                    b.Property<int>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specializare")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDoctor");

                    b.ToTable("Doctori");
                });

            modelBuilder.Entity("Proiect_Asp.Entities.Pacient", b =>
                {
                    b.Property<int>("IdPacient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CNP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenume")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPacient");

                    b.ToTable("Pacienti");
                });

            modelBuilder.Entity("Proiect_Asp.Entities.Programare", b =>
                {
                    b.Property<int>("IdProgramare")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Compensata")
                        .HasColumnType("bit");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacientId")
                        .HasColumnType("int");

                    b.HasKey("IdProgramare");

                    b.HasIndex("PacientId");

                    b.ToTable("Programari");
                });

            modelBuilder.Entity("Proiect_Asp.Entities.ProgramareDoctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramareId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "ProgramareId");

                    b.HasIndex("ProgramareId");

                    b.ToTable("ProgramariDoctori");
                });

            modelBuilder.Entity("Proiect_Asp.Entities.Adresa", b =>
                {
                    b.HasOne("Proiect_Asp.Entities.Pacient", "Pacient")
                        .WithOne("Adresa")
                        .HasForeignKey("Proiect_Asp.Entities.Adresa", "PacientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pacient");
                });

            modelBuilder.Entity("Proiect_Asp.Entities.Programare", b =>
                {
                    b.HasOne("Proiect_Asp.Entities.Pacient", "Pacient")
                        .WithMany("Programari")
                        .HasForeignKey("PacientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pacient");
                });

            modelBuilder.Entity("Proiect_Asp.Entities.ProgramareDoctor", b =>
                {
                    b.HasOne("Proiect_Asp.Entities.Doctor", "Doctor")
                        .WithMany("ProgramariDoctor")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proiect_Asp.Entities.Programare", "Programare")
                        .WithMany("ProgramariDoctor")
                        .HasForeignKey("ProgramareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Programare");
                });

            modelBuilder.Entity("Proiect_Asp.Entities.Doctor", b =>
                {
                    b.Navigation("ProgramariDoctor");
                });

            modelBuilder.Entity("Proiect_Asp.Entities.Pacient", b =>
                {
                    b.Navigation("Adresa");

                    b.Navigation("Programari");
                });

            modelBuilder.Entity("Proiect_Asp.Entities.Programare", b =>
                {
                    b.Navigation("ProgramariDoctor");
                });
#pragma warning restore 612, 618
        }
    }
}
